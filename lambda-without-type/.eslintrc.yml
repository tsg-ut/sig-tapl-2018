env:
  browser: true
  es6: true
extends: ['eslint:recommended']
parserOptions: {}
  #sourceType: module
rules:
  for-direction: error
  getter-return: error
  no-await-in-loop: warn
  no-console:
    - warn
    - allow: ['warn', 'error']
  no-extra-parens:
    - error
    - all
    - conditionalAssign: false
  no-prototype-builtins: warn
  no-template-curly-in-string: warn
  valid-jsdoc: error

  # Best Practices
  accessor-pairs: warn
  array-callback-return: error
  block-scoped-var: error
  class-methods-use-this: error
  complexity: warn
  consistent-return: error
  default-case: error
  eqeqeq: error
  guard-for-in: error
  no-alert: warn
  no-caller: error
  no-div-regex: error
  no-empty-function: error
  no-eq-null: error
  no-eval: error
  no-extra-bind: error
  no-extra-label: error
  no-floating-decimal: warn
  no-implicit-coercion: [error, allow: ['+']]
  no-multi-spaces:
    - error
    - exceptions:
        Property: true
        VariableDeclarator: true
  no-multi-str: error
  no-new: error
  no-new-func: error
  no-new-wrappers: error
  no-octal: error
  no-octal-escape: error
  no-param-reassign: [error, props: true]
  no-proto: error
  no-redeclare: [error, builtinGlobals: true]
  no-restricted-properties: 0
  no-return-assign: [error, always]
  no-return-await: error
  no-script-url: error
  no-self-assign: [error, props: true]
  no-self-compare: error
  no-sequences: error
  no-throw-literal: error
  no-unmodified-loop-condition: error
  no-unused-expressions: error
  no-unused-labels: error
  no-useless-call: error
  no-useless-concat: error
  no-useless-escape: error
  no-useless-return: error
  no-void: error
  no-warning-comments: 0
  no-with: error
  prefer-promise-reject-errors: error
  radix: [error, always]
  require-await: error
  vars-on-top: 0
  wrap-iife: error
  yoda: [error, never]

  # Strict Mode
  strict: [error, global]

  # Variables
  init-declarations: 0
  no-catch-shadow: error
  no-delete-var: error
  no-label-var: error
  no-restricted-globals: 0
  no-shadow:
    - error
    - builtinGlobals: true
      hoist: all
      allow: [_]
  no-shadow-restricted-names: error
  no-undef: [error, typeof: true]
  no-undef-init: error
  no-undefined: 0
  no-unused-vars:
    - error
    - varsIgnorePattern: "^_$"
      argsIgnorePattern: "^_$"
  no-use-before-define: error

  # Stylistic Issues
  array-bracket-newline: [error, consistent]
  array-bracket-spacing: [error, never]
  array-element-newline: 0
  block-spacing: [error, always]
  brace-style:
    - error
    - 1tbs
    - allowSingleLine: true
  camelcase: 0
  capitalized-comments: 0
  comma-dangle: [error, always-multiline]
  comma-spacing:
    - error
    - before: false
      after: true
  comma-style: [error, last]
  computed-property-spacing: [error, never]
  consistent-this: [error, that]
  eol-last: [error, always]
  func-call-spacing: [error, never]
  func-name-matching: [error, always]
  func-names: [error, as-needed]
  func-style:
    - error
    - declaration
    - allowArrowFunctions: true
  function-paren-newline: [error, consistent]
  id-blacklist: 0
  id-length: 0
  id-match:
    - error
    - '^\$?[a-zA-Z0-9_]*$'
    - properties: true
  implicit-arrow-linebreak: [error, beside]
  indent:
    - error
    - 2
    - outerIIFEBody: 0
      MemberExpression: off
      VariableDeclarator: {let: 2, const: 3}
      FunctionDeclaration: {parameters: first}
  jsx-quotes: 0
  key-spacing:
    - error
    - beforeColon: false
      afterColon: true
      #align: value
  keyword-spacing:
    - error
    - overrides:
        catch: {after: false}
        for: {after: false}
        if: {after: false}
        switch: {after: false}
        while: {after: false}
  line-comment-position: 0
  linebreak-style: [error, unix]
  lines-around-comment: 0
  lines-between-class-members: [error, always, exceptAfterSingleLine: true]
  max-depth: [error, 5]
  max-len:
    - error
    - code: 100
      ignoreUrls: true
  max-lines:
    - error
    - max: 300
      skipBlankLines: true
      skipComments: true
  max-nested-callbacks: 0
  max-params: [error, 3]
  max-statements: 0
  max-statements-per-line: [warn, max: 2]
  multiline-comment-style: [error, starred-block]
  multiline-ternary: [error, always-multiline]
  new-cap: error
  new-parens: error
  newline-per-chained-call: 0
  no-array-constructor: error
  no-bitwise: 0
  no-continue: 0
  no-inline-comments: 0
  no-lonely-if: error
  no-mixed-operators: 0
  no-mixed-spaces-and-tabs: error
  no-multi-assign: error
  no-multiple-empty-lines:
    - error
    - max: 1
      maxEOF: 0
  no-negated-condition: error
  no-nested-ternary: 0
  no-new-object: error
  no-plusplus: 0
  no-restricted-syntax:
    - error
    - BinaryExpression[operator='in']
    - ForInStatement
    - IfStatement>ArrowFunctionExpression.test
    - SequenceExpression
  no-tabs: error
  no-ternary: 0
  no-trailing-spaces: error
  no-underscore-dangle: 0
  no-unneeded-ternary: [error, defaultAssignment: false]
  no-whitespace-before-property: error
  nonblock-statement-body-position: 0
  object-curly-newline:
    - error
    - multiline: true
      consistent: true
  object-curly-spacing: [error, always]
  object-property-newline: 0
  one-var: [error, let: never]
  one-var-declaration-per-line: 0 # [error, initializations]
  operator-assignment: [error, always]
  operator-linebreak: [error, after]
  padded-blocks: [error, never]
  padding-line-between-statements:
    - error
    - {blankLine: always, prev: '*', next: class}
    - {blankLine: always, prev: '*', next: function}
    - {blankLine: always, prev: class, next: '*'}
    - {blankLine: always, prev: function, next: '*'}
    - {blankLine: always, prev: directive, next: '*'}
  quote-props: [error, as-needed]
  quotes: [warn, backtick]
  require-jsdoc: 0
  semi: [error, always]
  semi-spacing: error
  semi-style: [error, last]
  sort-keys: 0
  sort-vars: 0
  space-before-blocks: [error, always]
  space-before-function-paren:
    - error
    - anonymous: never
      named: never
      asyncArrow: always
  space-in-parens: [error, never]
  space-infix-ops: error
  space-unary-ops:
    - error
    - words: true
      nonwords: false
  spaced-comment: [error, always]
  switch-colon-spacing: error
  template-tag-spacing: [error, never]
  unicode-bom: [error, never]
  wrap-regex: 0

  # ECMAScript 6
  arrow-body-style: [error, as-needed]
  arrow-parens: [error, as-needed]
  arrow-spacing: error
  constructor-super: error
  generator-star-spacing: [error, after]
  no-class-assign: error
  no-confusing-arrow: [error, allowParens: true]
  no-const-assign: error
  no-dupe-class-members: error
  no-duplicate-imports: [error, includeExports: true]
  no-new-symbol: error
  no-restricted-imports: 0
  no-this-before-super: error
  no-useless-computed-key: error
  no-useless-constructor: warn
  no-useless-rename: error
  no-var: error
  object-shorthand: [error, always, avoidExplicitReturnArrows: true]
  prefer-arrow-callback: error
  prefer-const: error
  prefer-destructuring: 0
  prefer-numeric-literals: error
  prefer-rest-params: error
  prefer-spread: error
  prefer-template: 0 # may be multiline
  require-yield: error
  rest-spread-spacing: [error, never]
  sort-imports: error
  symbol-description: error
  template-curly-spacing: [error, never]
  yield-star-spacing: [error, after]
